////  PLExportSublayers for Illustrator  (Exports Sublayers as individual images)//  //  Exports sublayers as individual image files into a directory with the same name as a top layer//  If the top layer does not have a cooresponding directory, the files under that layer will not be //  exported////    The MIT License (MIT)////    Copyright (c) 2015 David C. Vallas (david_vallas@yahoo.com) (dcvallas@twitter)////    Permission is hereby granted, free of charge, to any person obtaining a copy//    of this software and associated documentation files (the "Software"), to deal//    in the Software without restriction, including without limitation the rights//    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//    copies of the Software, and to permit persons to whom the Software is//    furnished to do so, subject to the following conditions:////    The above copyright notice and this permission notice shall be included in all//    copies or substantial portions of the Software.////    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE//    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE//    SOFTWAREvar docRef = app.activeDocument;// Default Variables, change as neededvar base_path           = docRef.path.fsName;var format                = 'PNG 24';  // Make sure this value is the same as initial, search formatList.selection = , 0 = PNG 8, 1 = PNG 24, 2 = JPEGvar scaling                = 100.0;var pixelBorder          = 0;var dlg                     = new Window('dialog', 'Export Sublayers as Individual Files in Layer Directory');var originalBounds     = app.activeDocument.artboards[0].artboardRect;// Window.alert( 'Use this command for debug.' );    function init() {		this.num_layers_to_export = this.get_num_layers_to_export();		var parse_success = this.load_prefs();    		if (parse_success) {	    this.show_dialog();	}}    function load_prefs() {		var parse_success = false;		// find existing layers or add new one    // DO NOTHING, CAN REMOVE VARIABLES    var parse_success = true;    return parse_success; }function show_dialog() {	// Export dialog done at the top	// this.dlg = new Window('dialog', 'Export Layers For iOS Application'); 		// Export Each Layer Pannel	var exportPanel = this.dlg.add('panel', undefined, 'Export Each Sublayer');     // Scaling Row	var scaleRow = exportPanel.add('group', undefined, '')	scaleRow.oreintation = 'row';	scaleRow.alignment = [ScriptUI.Alignment.LEFT, ScriptUI.Alignment.TOP]	var scaleTitle = scaleRow.add('statictext', undefined, 'Scaling:');	scaleTitle.size = [100,20]	var scaleField = scaleRow.add('edittext', undefined, this.scaling);	scaleField.size = [ 100,20 ];	var scaleDescription = scaleRow.add('statictext', undefined, '(Normally 100%)'); 	scaleDescription.size = [300,20]        // Pixel Border Row	var pixelBorderRow = exportPanel.add('group', undefined, '')	pixelBorderRow.oreintation = 'row';	pixelBorderRow.alignment = [ScriptUI.Alignment.LEFT, ScriptUI.Alignment.TOP]	var pixelTitle = pixelBorderRow.add('statictext', undefined, 'Border Buffer');	pixelTitle.size = [100,20]	var pixelField = pixelBorderRow.add('edittext', undefined, this.pixelBorder);	pixelField.size = [ 100,20 ];        var pixelDescription = pixelBorderRow.add('statictext', undefined, '(In Pixels)'); 	pixelDescription.size = [300,20]	// Output Directory Row	var outputDirectoryRow = exportPanel.add( 'group', undefined, '') 	outputDirectoryRow.orientation = 'row'	outputDirectoryRow.alignment = [ScriptUI.Alignment.LEFT, ScriptUI.Alignment.TOP]		var directoryTitle = outputDirectoryRow.add('statictext', undefined, 'Output directory:'); 	directoryTitle.size = [ 100,20 ];	var directoryField = outputDirectoryRow.add('edittext', undefined, this.base_path); 	directoryField.size = [ 300,20 ];	var directoryButton = outputDirectoryRow.add('button', undefined, 'Choose ...' );    directoryButton.onClick = function() {        directoryField.text = Folder.selectDialog();     };	// Format and Transparency Row	var formatRow = exportPanel.add('group', undefined, ''); 	formatRow.orientation = 'row';	formatRow.alignment = [ScriptUI.Alignment.LEFT, ScriptUI.Alignment.TOP];  	var formatTitle = formatRow.add('statictext', undefined, 'Export format:'); 	formatTitle.size = [ 100,20 ];    		var formatList = formatRow.add('dropdownlist', undefined, [ 'PNG 8', 'PNG 24', 'JPG' ]);	formatList.selection = 1;		formatRow.transparentChk = formatRow.add('checkbox', undefined, 'Transparency');	formatRow.transparentChk.value = this.transparency;        // Progress Row	var progBar = exportPanel.add( 'progressbar', undefined, 0, 100 );	progBar.size = [400,10]	var progLabel = exportPanel.add('statictext', undefined, '...' ); 	progLabel.size = [ 400,20 ];    // Ok Cancel Row    	var btnPnl = this.dlg.add('group', undefined, ''); 	btnPnl.orientation = 'row'	btnPnl.cancelBtn = btnPnl.add('button', undefined, 'Cancel', {name:'cancel'});	btnPnl.cancelBtn.onClick = function() { this.dlg.close() };	// OK button	btnPnl.okBtn = btnPnl.add('button', undefined, 'Export', {name:'ok'});	btnPnl.okBtn.onClick = function() {             scale = parseFloat( scaleField.text.replace( /\% /, '' ));            format = formatList.selection.text;            transparency = formatRow.transparentChk.value;            base_Path = directoryField.text;            pixelBorder = parseInt( pixelField.text.replace( /\% /, '' ) );            exportClicked()      };	this.update_export_desc( progLabel );		this.dlg.progLabel = progLabel;	this.dlg.progBar = progBar;		this.dlg.show();}function exportClicked() {	                // Run Export            run_export();             app.activeDocument.artboards[0].artboardRect = originalBounds;            Window.alert( 'Export Completed Run' );}function update_export_desc ( progLabel ) {	    progLabel.text = 'Will export ' + this.num_layers_to_export;	    this.num_to_export = this.num_layers_to_export;       }function run_export() {	var num_exported = 0;	var options;	    	if ( this.format =='PNG 8' ) {	    options                         = new ExportOptionsPNG8();	    options.antiAliasing        = true;	    options.transparency      = true; 	    options.artBoardClipping = true;	    options.horizontalScale   = this.scaling;	    options.verticalScale       = this.scaling;		                	} else if ( this.format == 'PNG 24' ) {	    options                         = new ExportOptionsPNG24();	    options.antiAliasing        = true;	    options.transparency      = true; 	    options.artBoardClipping = true;	    options.horizontalScale   = this.scaling;	    options.verticalScale       = this.scaling;		    	    	} else if ( this.format == 'JPG' ) {	    options                         = new ExportOptionsJPEG();	    options.antiAliasing        = true;	    options.artBoardClipping = true;	    options.horizontalScale   = this.scaling;	    options.verticalScale       = this.scaling;		    	}         for ( var j=0; j < docRef.layers.length; j++ ) {            var layer = docRef.layers[j];            var subnum = layer.layers.length                        // Check to make sure Folder is setup for the Mainlayer, if not creates one                        var layerFolder = this.base_path + "/" + layer.name;                                           for (var p=0; p< subnum; ++p) {                            sublayer = layer.layers[p];                                                   var sublayer_name = sublayer.name;                                            hide_all_layers_except(p, j);                                                                var base_filename = layerFolder  + "/" + sublayer_name;                            var idoc = app.activeDocument;                                                        app.activeDocument.artboards[0].artboardRect = originalBounds;                            idoc.selectObjectsOnActiveArtboard();                                                                                    var pb = this.pixelBorder;                            var bounds = idoc.geometricBounds;                            var boundWithBorder = [bounds[0] - pb, bounds[1] + pb, bounds[2] + pb, bounds[3] - pb];                            //Window.alert( 'PixelBorder is ' + pb + ' bounds is ' + bounds + ' boundWithBorder is ' + boundWithBorder);                            app.activeDocument.artboards[0].artboardRect = boundWithBorder;                                                        if ( this.format.match( /^PNG/ )) {                                    var destFile = new File( base_filename + '.png' );                                       var export_type = this.format == 'PNG 8' ? ExportType.PNG8 : ExportType.PNG24;                                    docRef.exportFile(destFile, export_type , options);                                                        } else if ( this.format.match( /^JPG/ )) {                                    var destFile = new File( base_filename + '.jpg' );                                       var export_type = ExportType.JPEG;                                    docRef.exportFile(destFile, export_type , options);                            }                             num_exported++;                                                                                    dlg.progLabel.text = 'Exported ' + num_exported + ' of ' + this.num_to_export;                            dlg.progBar.value = num_exported / this.num_to_export * 100;                            dlg.update();                         }                           }  	    show_all_layers();    this.dlg.close();	//end run_export}    function getRealVisibleBounds(grp) {      var bounds = [];      for(i = grp.pathItems.length - 1; i >=0; i--){               if(grp.pathItems[i].typename == "PathItem" && grp.pathItems[i].clipping) bounds = grp.pathItems[i].visibleBounds;            }     return (bounds.length == 0) ? null : bounds;}            function hide_all_layers_except(pVal, iVal) {	var n = docRef.layers.length;	for(var i=0; i < n; ++i) {	    layer = docRef.layers[i];        layer.visible = true;	    var subnum = layer.layers.length                for (var p=0; p < subnum; p++) {                        sublayer = layer.layers[p];                        if (p == pVal && i == iVal) {                                sublayer.visible = true;                        } else {                                sublayer.visible = false;                        }                }    }}function get_num_layers_to_export() {	var num_to_export = 0;	var num_layers = docRef.layers.length;	for(var i=0; i < num_layers; i++)  {            var layer = docRef.layers[i];                     num_to_export = num_to_export + layer.layers.length;     }	return num_to_export;}    function show_all_layers() {        var n = docRef.layers.length;        for (var i=0; i<n; ++i) {                layer = docRef.layers[i];                layer.visible = true;                // Make sublayers visible as well                var subnum = layer.layers.length                for (var p=0; p<subnum; ++p) {                        sublayer = layer.layers[p];                        sublayer.visible = true;                }        }}init();